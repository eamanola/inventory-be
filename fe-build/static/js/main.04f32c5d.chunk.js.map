{"version":3,"sources":["services/category.js","app.js","index.js"],"names":["cache","getFromCache","category","cached","expires","Date","getTime","data","getFromServer","a","url","axios","get","response","console","log","getCategory","App","useState","setCategory","list","setList","gloves","facemasks","beanies","page","setPage","loading","setLoading","useEffect","setTimeout","categoryService","availabilityColor","availability","color","green","yellow","red","Container","maxWidth","Paper","AppBar","position","Tabs","value","onChange","e","newValue","Tab","label","List","slice","map","item","ListItem","ListItemText","primary","name","secondary","style","manufacturer","Grid","container","justify","padding","Pagination","count","Math","floor","length","Backdrop","open","zIndex","CircularProgress","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yVAKMA,EAAQ,GAERC,EAAe,SAACC,GACpB,IAAMC,EAASH,EAAME,GAErB,OAAIC,GAAUA,EAAOC,SAAW,IAAIC,MAAQC,UACnCH,EAAOI,KAGT,MAGHC,EAAa,uCAAG,WAAON,GAAP,mBAAAO,EAAA,6DACdC,EADc,UAdlB,GAckB,qBACeR,GADf,kBAGKS,IAAMC,IAAIF,GAHf,cAGZG,EAHY,OAIVN,EAASM,EAATN,KACRP,EAAME,GAAY,CAChBK,OACAH,SAAU,IAAIC,MAAQC,UAAY,KAPlB,kBAUXC,GAVW,kCAalBO,QAAQC,IAAR,MAbkB,iCAgBb,MAhBa,0DAAH,sDA8BJ,GAAEC,YAXA,uCAAG,WAAOd,GAAP,eAAAO,EAAA,yDAIL,QADbF,EAAON,EAAaC,IAHF,gCAKHM,EAAcN,GALX,OAKhBK,EALgB,uCAQXA,GARW,2CAAH,uD,OC2FFU,EA3GH,WACV,MAAgCC,mBAAS,UAAzC,mBAAOhB,EAAP,KAAiBiB,EAAjB,KACA,EAAwBD,mBAAS,IAAjC,mBAAOE,EAAP,KAAaC,EAAb,KACA,EAAwBH,mBAAS,CAC/BI,OAAQ,EACRC,UAAW,EACXC,QAAS,IAHX,mBAAOC,EAAP,KAAaC,EAAb,KAKA,EAA8BR,oBAAS,GAAvC,mBAAOS,EAAP,KAAgBC,EAAhB,KAYAC,oBAAS,sBAAC,4BAAApB,EAAA,6DACRqB,YAAW,WAAQF,GAAW,MADtB,SAGWG,EAAgBf,YAAYd,GAHvC,OAGFK,EAHE,OAIRc,EAAQd,GACRuB,YAAW,WAAQF,GAAW,KAAW,GALjC,2CAMP,CAAC1B,IAEJ,IAAM8B,EAAoB,SAACC,GACzB,IAAIC,EAEJ,OAAQD,GACN,IAAK,UAEHC,EAAQC,IAAM,KACd,MACF,IAAK,aAEHD,EAAQE,IAAO,KACf,MACF,IAAK,aAEHF,EAAQG,IAAI,KACZ,MACF,QACEH,EAAQ,UAGZ,OAAOA,GAGT,OACE,mCACE,eAACI,EAAA,EAAD,CAAWC,SAAS,KAApB,UACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAQC,SAAS,SAAjB,SACE,eAACC,EAAA,EAAD,CAAMC,MAAO1C,EAAU2C,SA5CJ,SAACC,EAAGC,GAC/B5B,EAAY4B,IA2CJ,UACE,cAACC,EAAA,EAAD,CAAKJ,MAAM,SAASK,MAAM,WAC1B,cAACD,EAAA,EAAD,CAAKJ,MAAM,YAAYK,MAAM,cAC7B,cAACD,EAAA,EAAD,CAAKJ,MAAM,UAAUK,MAAM,iBAG/B,cAACC,EAAA,EAAD,UACG9B,EAAK+B,MArDO,GAsDX1B,EAAKvB,GAtDM,IAuDVuB,EAAKvB,GAAY,IAClBkD,KAAI,SAACC,GAAD,OACJ,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CACEC,QAASH,EAAKI,KACdC,UACE,qCACE,sBACEC,MAAO,CAAEzB,MAAOF,EAAkBqB,EAAKpB,eADzC,SAGGoB,EAAKpB,eAJV,iBASGoB,EAAKO,yBAOlB,cAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,SAASJ,MAAO,CAAEK,QAAS,WAAnD,SACE,cAACC,EAAA,EAAD,CACEC,MACEC,KAAKC,MAAMhD,EAAKiD,OAhFP,KAiFNjD,EAAKiD,OAjFC,GAiFyB,EAAI,EAAI,GAE5CnC,MAAM,UACNT,KAAMA,EAAKvB,GAAY,EACvB2C,SA/Ea,SAACC,EAAGC,GAC3BrB,EAAQ,2BAAKD,GAAN,kBAAavB,EAAW6C,EAAW,aAkFtC,cAACuB,EAAA,EAAD,CAAUC,KAAM5C,EAASgC,MAAO,CAAEa,OAAQ,GAA1C,SACE,cAACC,EAAA,EAAD,YClHRC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.04f32c5d.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst baseUrl = process.env.NODE_ENV === 'production'\n  ? '' : 'http://localhost:3002';\n\nconst cache = {};\n\nconst getFromCache = (category) => {\n  const cached = cache[category];\n\n  if (cached && cached.expires > (new Date()).getTime()) {\n    return cached.data;\n  }\n\n  return null;\n};\n\nconst getFromServer = async (category) => {\n  const url = `${baseUrl}/category/${category}`;\n  try {\n    const response = await axios.get(url);\n    const { data } = response;\n    cache[category] = {\n      data,\n      expires: (new Date()).getTime() + 1000 * 60 * 5,\n    };\n\n    return data;\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.log(e);\n  }\n\n  return null;\n};\n\nconst getCategory = async (category) => {\n  let data;\n\n  data = getFromCache(category);\n  if (data === null) {\n    data = await getFromServer(category);\n  }\n\n  return data;\n};\n\nexport default { getCategory };\n","import React, { useEffect, useState } from 'react';\n\nimport {\n  Container, Paper,\n  AppBar, Tabs, Tab,\n  List, ListItem, ListItemText,\n  Backdrop, CircularProgress,\n  Grid,\n} from '@material-ui/core';\n\nimport {\n  green,\n  yellow,\n  red,\n} from '@material-ui/core/colors';\n\nimport { Pagination } from '@material-ui/lab';\n\nimport categoryService from './services/category';\n\nconst App = () => {\n  const [category, setCategory] = useState('gloves');\n  const [list, setList] = useState([]);\n  const [page, setPage] = useState({\n    gloves: 0,\n    facemasks: 0,\n    beanies: 0,\n  });\n  const [loading, setLoading] = useState(false);\n\n  const ITEMS_PER_PAGE = 10;\n\n  const handleCategoryChange = (e, newValue) => {\n    setCategory(newValue);\n  };\n\n  const handlePageChange = (e, newValue) => {\n    setPage({ ...page, [category]: newValue - 1 });\n  };\n\n  useEffect(async () => {\n    setTimeout(() => { setLoading(true); });\n\n    const data = await categoryService.getCategory(category);\n    setList(data);\n    setTimeout(() => { setLoading(false); }, 1);\n  }, [category]);\n\n  const availabilityColor = (availability) => {\n    let color;\n\n    switch (availability) {\n      case 'INSTOCK':\n        // eslint-disable-next-line prefer-destructuring\n        color = green[400];\n        break;\n      case 'LESSTHAN10':\n        // eslint-disable-next-line prefer-destructuring\n        color = yellow[400];\n        break;\n      case 'OUTOFSTOCK':\n        // eslint-disable-next-line prefer-destructuring\n        color = red[400];\n        break;\n      default:\n        color = 'inherit';\n    }\n\n    return color;\n  };\n\n  return (\n    <>\n      <Container maxWidth=\"sm\">\n        <Paper>\n          <AppBar position=\"static\">\n            <Tabs value={category} onChange={handleCategoryChange}>\n              <Tab value=\"gloves\" label=\"Gloves\" />\n              <Tab value=\"facemasks\" label=\"Facemasks\" />\n              <Tab value=\"beanies\" label=\"Beanies\" />\n            </Tabs>\n          </AppBar>\n          <List>\n            {list.slice(\n              page[category] * ITEMS_PER_PAGE,\n              (page[category] + 1) * ITEMS_PER_PAGE,\n            ).map((item) => (\n              <ListItem>\n                <ListItemText\n                  primary={item.name}\n                  secondary={(\n                    <>\n                      <span\n                        style={{ color: availabilityColor(item.availability) }}\n                      >\n                        {item.availability}\n                      </span>\n                      &nbsp;\n                      from\n                      &nbsp;\n                      {item.manufacturer}\n                    </>\n                  )}\n                />\n              </ListItem>\n            ))}\n          </List>\n          <Grid container justify=\"center\" style={{ padding: '0.5em 0' }}>\n            <Pagination\n              count={\n                Math.floor(list.length / ITEMS_PER_PAGE)\n                + (list.length % ITEMS_PER_PAGE > 0 ? 1 : 0)\n              }\n              color=\"primary\"\n              page={page[category] + 1}\n              onChange={handlePageChange}\n            />\n          </Grid>\n        </Paper>\n        <Backdrop open={loading} style={{ zIndex: 1 }}>\n          <CircularProgress />\n        </Backdrop>\n      </Container>\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './app';\n\nconst render = () => {\n  ReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n  );\n};\n\nrender();\n"],"sourceRoot":""}